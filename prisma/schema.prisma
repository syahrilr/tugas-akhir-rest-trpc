generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model dokumen {
  id               String    @id @unique
  nama             String?
  jenis_dokumen    String?
  nama_file        String?
  jenis_file       String?
  tanggal_upload   DateTime?
  tautan           String?   @db.VarChar(2550)
  keterangan       String?   @db.VarChar(10000)
  id_jenis_dokumen Int?
  id_sdm           String
  dosen            dosen     @relation(fields: [id_sdm], references: [id_sdm])

  @@index([id_sdm], map: "dokumen_id_sdm_fkey")
}

model dosen {
  id                  String              @id
  id_sdm              String              @unique
  nama_sdm            String?
  nidn                String?
  nip                 String?
  nama_status_aktif   String?
  nama_status_pegawai String?
  jenis_sdm           String?
  dokumen             dokumen[]
  pendidikan_formal   pendidikan_formal[]
}

model pendidikan_formal {
  id                    String  @id @unique
  jenjang_pendidikan    String?
  gelar_akademik        String?
  bidang_studi          String?
  nama_perguruan_tinggi String?
  tahun_lulus           Int?
  id_sdm                String
  dosen                 dosen   @relation(fields: [id_sdm], references: [id_sdm])

  @@index([id_sdm], map: "pendidikan_formal_id_sdm_fkey")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model passwordresettoken {
  id      String   @id
  email   String
  token   String   @unique(map: "PasswordResetToken_token_key")
  expires DateTime

  @@unique([email, token], map: "PasswordResetToken_email_token_key")
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  password      String?
  account       account[]
}

model verificationtoken {
  id      String   @id
  email   String
  token   String   @unique(map: "VerificationToken_token_key") @db.VarChar(500)
  expires DateTime

  @@unique([email, token], map: "VerificationToken_email_token_key")
}
